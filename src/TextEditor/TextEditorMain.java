/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package TextEditor;

import static com.sun.java.accessibility.util.AWTEventMonitor.addWindowListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.event.WindowStateListener;
import java.awt.print.PrinterException;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JTextArea;
import say.swing.JFontChooser;

/**
 *
 * @author Tripat
 */
public class TextEditorMain extends javax.swing.JFrame {

    String path = "";
    String savePath = "";
    String newPath = "";
    
    /**
     * Creates new form TextEditorMain
     */
    public TextEditorMain() {
        initComponents();
        this.jPanel1.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        writePane = new javax.swing.JTextArea();
        jFileChooser1 = new javax.swing.JFileChooser();
        jMenuBar1 = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        newItem = new javax.swing.JMenuItem();
        jSeparator3 = new javax.swing.JPopupMenu.Separator();
        openItem = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        saveItem = new javax.swing.JMenuItem();
        saveAsItem = new javax.swing.JMenuItem();
        jSeparator7 = new javax.swing.JPopupMenu.Separator();
        printItem = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();
        closeItem = new javax.swing.JMenuItem();
        editMenu = new javax.swing.JMenu();
        cutItem = new javax.swing.JMenuItem();
        copyItem = new javax.swing.JMenuItem();
        pasteItem = new javax.swing.JMenuItem();
        jSeparator4 = new javax.swing.JPopupMenu.Separator();
        delItem = new javax.swing.JMenuItem();
        textMenu = new javax.swing.JMenu();
        jSeparator5 = new javax.swing.JPopupMenu.Separator();
        jMenuItem1 = new javax.swing.JMenuItem();
        helpMenu = new javax.swing.JMenu();
        jSeparator6 = new javax.swing.JPopupMenu.Separator();
        about = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("TextoR");
        setBounds(new java.awt.Rectangle(300, 50, 0, 0));
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setFont(new java.awt.Font("Times New Roman", 0, 24)); // NOI18N
        setForeground(new java.awt.Color(0, 153, 153));

        writePane.setColumns(20);
        writePane.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        writePane.setRows(5);
        jScrollPane2.setViewportView(writePane);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 405, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 482, Short.MAX_VALUE)
        );

        jMenuBar1.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        fileMenu.setText("File");
        fileMenu.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N

        newItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        newItem.setText("New");
        newItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newItemActionPerformed(evt);
            }
        });
        fileMenu.add(newItem);
        fileMenu.add(jSeparator3);

        openItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        openItem.setText("Open");
        openItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openItemActionPerformed(evt);
            }
        });
        fileMenu.add(openItem);
        fileMenu.add(jSeparator1);

        saveItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        saveItem.setText("Save");
        saveItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveItemActionPerformed(evt);
            }
        });
        fileMenu.add(saveItem);

        saveAsItem.setText("Save As");
        saveAsItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveAsItemActionPerformed(evt);
            }
        });
        fileMenu.add(saveAsItem);
        fileMenu.add(jSeparator7);

        printItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_P, java.awt.event.InputEvent.CTRL_MASK));
        printItem.setText("Print");
        printItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                printItemActionPerformed(evt);
            }
        });
        fileMenu.add(printItem);
        fileMenu.add(jSeparator2);

        closeItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F4, java.awt.event.InputEvent.ALT_MASK));
        closeItem.setText("Close");
        closeItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeItemActionPerformed(evt);
            }
        });
        fileMenu.add(closeItem);

        jMenuBar1.add(fileMenu);

        editMenu.setText("Edit");

        cutItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_X, java.awt.event.InputEvent.CTRL_MASK));
        cutItem.setText("Cut");
        cutItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cutItemActionPerformed(evt);
            }
        });
        editMenu.add(cutItem);

        copyItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.CTRL_MASK));
        copyItem.setText("Copy");
        copyItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                copyItemActionPerformed(evt);
            }
        });
        editMenu.add(copyItem);

        pasteItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_V, java.awt.event.InputEvent.CTRL_MASK));
        pasteItem.setText("Paste");
        pasteItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pasteItemActionPerformed(evt);
            }
        });
        editMenu.add(pasteItem);
        editMenu.add(jSeparator4);

        delItem.setText("Delete");
        delItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                delItemActionPerformed(evt);
            }
        });
        editMenu.add(delItem);

        jMenuBar1.add(editMenu);

        textMenu.setText("View");
        textMenu.add(jSeparator5);

        jMenuItem1.setText("Font");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        textMenu.add(jMenuItem1);

        jMenuBar1.add(textMenu);

        helpMenu.setText("Help");
        helpMenu.add(jSeparator6);

        about.setText("About");
        about.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aboutActionPerformed(evt);
            }
        });
        helpMenu.add(about);

        jMenuBar1.add(helpMenu);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    
    /*Commands for save as menu item.
    destination folder for file saving is choosed.
    name and extension to the file is given and saved.
    */
    public void SaveAs(){
        JFileChooser chooser = new JFileChooser();
        int result = chooser.showSaveDialog(null);
        chooser.setDialogTitle("Save As");
        if(result == JFileChooser.APPROVE_OPTION)//making of new file and writing the text to it.
        {
            String data = this.writePane.getText();
            File file = chooser.getSelectedFile();
            try {
                FileWriter writer = new FileWriter(file.getPath());
                writer.write(data);
                savePath = file.getPath();
                newPath = file.getPath();
                writer.flush();
                writer.close();
            } catch (IOException ex) {
                Logger.getLogger(TextEditorMain.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }
    
    /*
    Commands for the open menu item.
    Destination folder is opened and file is selected and opened.
    */
    public void Open(){
        New();
        JFileChooser chooser = new JFileChooser();
        int n = chooser.showOpenDialog(null);
        chooser.setDialogTitle("Open");
        if(n == JFileChooser.APPROVE_OPTION)//extracting of data after file is selected.
        {
            File file = chooser.getSelectedFile();
            path = file.getPath();
            newPath = file.getPath();
            try {
                Scanner output = new Scanner(file);
                String data = "";
                while(output.hasNext()){
                    data += output.nextLine() + "\n";
                }
                this.jPanel1.setVisible(true);
                this.writePane.setText(data);
            } catch (FileNotFoundException ex) {
                Logger.getLogger(TextEditorMain.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }
    
    /*Commands for updating already saved file.
    if changes made to file it helps to save it to the same file where already saved.
    */
    public void SaveAgain(String way){
        String data = this.writePane.getText();
            File file = new File(way);
            try {
                PrintWriter writer = new PrintWriter(file);
                writer.write(data);
                writer.flush();
                writer.close();
            } catch (FileNotFoundException e) {
            }
    }
    
    /*Commands for the save menu item.
    Save to already saved file.
    */
    public void Save() {
        if(path.equalsIgnoreCase("")){
            if(savePath.equalsIgnoreCase("")){
                SaveAs();
            }else {
            SaveAgain(savePath);
            }
        }else {
            SaveAgain(path);
        }
    }
     
    /*
    commands to be executed for the new menu item.
    */
    public void New() {
        if(this.jPanel1.isVisible() == false)//when window is just opened.
        {
            this.jPanel1.setVisible(true);
            this.writePane.setText(null);
            newPath = "none";
        }else{
            File file = new File(newPath);
            if(file.exists() == true)//checks if the file already exists.
            {
                try {
                    String data = "";
                    Scanner output = new Scanner(file);
                    while(output.hasNext()){
                        data += output.nextLine() + "\n";
                    }
                    output.close();
                    if(!this.writePane.getText().equalsIgnoreCase(data))//if saved text edited than asked if want to save the unsaved.
                    {
                        int ans = JOptionPane.showConfirmDialog(null,"Do you want to save changes?","Save",JOptionPane.YES_NO_OPTION,JOptionPane.QUESTION_MESSAGE);
                        if(ans == JOptionPane.YES_OPTION){
                        SaveAgain(newPath);
                        }
                    }
                } catch (FileNotFoundException ex) {
                    Logger.getLogger(TextEditorMain.class.getName()).log(Level.SEVERE, null, ex);
                }finally {
                    this.jPanel1.setVisible(false);
                    New();
                }
            }else//includes commands for newly made file. 
            {
                if(this.writePane.getText().equals("")){
                    this.jPanel1.setVisible(false);
                    New();
                }else{
                    int n = JOptionPane.showConfirmDialog(null,"Do you want to save this file?","Save",JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE);
                    if(n == JOptionPane.OK_OPTION){
                        Save();
                        this.jPanel1.setVisible(false);
                        New();
                    }else if(n == JOptionPane.NO_OPTION){
                        this.jPanel1.setVisible(false);
                        New();
                    }
                }
            }
        }
    }
    
    /*commands to be executed when window is to be closed.
    ask if want to save the unsaved.
    */
    public void Closing(){
        if(this.writePane.getText().equals("")){
            this.jPanel1.setVisible(false);
            New();
            }else{
                int n = JOptionPane.showConfirmDialog(null,"Do you want to save this file?","Save",JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE);
                if(n == JOptionPane.OK_OPTION){
                    Save();
                    this.dispose();
                }else if(n == JOptionPane.NO_OPTION){
                    this.dispose();
            }
        }
    }
    
    private void newItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newItemActionPerformed
        New();
    }//GEN-LAST:event_newItemActionPerformed

    private void closeItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeItemActionPerformed
        Closing();
    }//GEN-LAST:event_closeItemActionPerformed

    private void cutItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cutItemActionPerformed
        this.writePane.cut();
    }//GEN-LAST:event_cutItemActionPerformed

    private void copyItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_copyItemActionPerformed
        this.writePane.copy();
    }//GEN-LAST:event_copyItemActionPerformed

    private void pasteItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pasteItemActionPerformed
        this.writePane.paste();
    }//GEN-LAST:event_pasteItemActionPerformed

    private void delItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_delItemActionPerformed
        this.writePane.replaceSelection("");
    }//GEN-LAST:event_delItemActionPerformed

    private void openItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openItemActionPerformed
        Open();
    }//GEN-LAST:event_openItemActionPerformed

    private void saveItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveItemActionPerformed
        Save();       
    }//GEN-LAST:event_saveItemActionPerformed

    private void saveAsItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveAsItemActionPerformed
        SaveAs();
    }//GEN-LAST:event_saveAsItemActionPerformed

    /*
    information showed under about menu item.
    NOT OF MUCH USE.
    */
    private void aboutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aboutActionPerformed
        String text = "First ever project. \n Have some imperfections maybe but is a basic editor with all things needed. \n while saving file you need to give extension yourself. \n ";
        JOptionPane.showMessageDialog(null, text, "About", JOptionPane.PLAIN_MESSAGE);
    }//GEN-LAST:event_aboutActionPerformed

    /*for changing the font.
    commands applied directly on menu item.
    */
    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        JFontChooser choice = new JFontChooser();
        choice.setSelectedFont(this.writePane.getFont());
        JOptionPane.showMessageDialog(null, choice,"Choose Font",JOptionPane.PLAIN_MESSAGE);
        this.writePane.setFont(choice.getSelectedFont());
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    /*
    command includes the printing of the text written in the text editor.
    */
    private void printItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_printItemActionPerformed
        try {
            boolean done = this.writePane.print();
            if(done){
                JOptionPane.showMessageDialog(null,"Printing Done!");
            }else{
                JOptionPane.showMessageDialog(null,"Printing...");
            }
        } catch (PrinterException ex) {
            Logger.getLogger(TextEditorMain.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_printItemActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TextEditorMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TextEditorMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TextEditorMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TextEditorMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        TextEditorMain tem = new TextEditorMain();
        
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                tem.setVisible(true);
            }
        });
        
        /*
        check file saved.
        if not ask if want to save or not.
        */
        tem.addWindowListener(new WindowAdapter(){
           @Override
           public void windowClosing(WindowEvent e){
               tem.Closing();
           } 
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem about;
    private javax.swing.JMenuItem closeItem;
    private javax.swing.JMenuItem copyItem;
    private javax.swing.JMenuItem cutItem;
    private javax.swing.JMenuItem delItem;
    private javax.swing.JMenu editMenu;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JMenu helpMenu;
    private javax.swing.JFileChooser jFileChooser1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    private javax.swing.JPopupMenu.Separator jSeparator3;
    private javax.swing.JPopupMenu.Separator jSeparator4;
    private javax.swing.JPopupMenu.Separator jSeparator5;
    private javax.swing.JPopupMenu.Separator jSeparator6;
    private javax.swing.JPopupMenu.Separator jSeparator7;
    private javax.swing.JMenuItem newItem;
    private javax.swing.JMenuItem openItem;
    private javax.swing.JMenuItem pasteItem;
    private javax.swing.JMenuItem printItem;
    private javax.swing.JMenuItem saveAsItem;
    private javax.swing.JMenuItem saveItem;
    private javax.swing.JMenu textMenu;
    private javax.swing.JTextArea writePane;
    // End of variables declaration//GEN-END:variables
}
